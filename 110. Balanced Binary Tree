class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right
class Solution:
    def maxDepth(self, root: Optional[TreeNode]) -> int:
        if root is None:
            return 0
        else:
            lheight = self.maxDepth(root.left)
            rheight = self.maxDepth(root.right)
        
            if lheight >= rheight:
                return (lheight+1)
            else:
                return (rheight+1)

    def isBalanced(self, root: Optional[TreeNode]) -> bool:
        if (root is None) or ((root.left is None) and (root.right is None)):
            return True
        else:
            lheight = self.maxDepth(root.left)
            rheight = self.maxDepth(root.right)
        
            print(lheight, rheight)
            if (abs(lheight - rheight) <= 1) and (self.isBalanced(root.left) is True) and (self.isBalanced(root.right) is True):
                return True
            else:
                return False
