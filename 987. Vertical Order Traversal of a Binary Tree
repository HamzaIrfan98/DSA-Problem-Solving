from collections import defaultdict

# Definition for a binary tree node.
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

class Solution:
    def verticalTraversal(self, root: Optional[TreeNode]) -> List[List[int]]:
        queue = []
        queue.append((root,0,0))
        dic = defaultdict(list)
    
        while queue:
            (node,row,col) = queue.pop(0)
            dic[col].append((row, node.val))

            if node.left:
                queue.append((node.left, row+1, col-1)) 
            if node.right:
                queue.append((node.right, row+1, col+1)) 
        
        return [[value for (row, value) in sorted(arr)] for (col, arr) in sorted(dic.items())]
